From e9d90158a5be32c5f489a1bb6750aaf157771723 Mon Sep 17 00:00:00 2001
From: Wang Xuerui <idontknw.wang@gmail.com>
Date: Fri, 25 Mar 2016 16:50:24 +0800
Subject: [PATCH] RILConstants: add MTK bits

Change-Id: I24f11a2373d87e1056d551eed62f6fdf8a20be98

RILConstants: MTK please

Change-Id: I282b3491af3dbff40b308814e7269282a1c03c34
---
 .../android/internal/telephony/RILConstants.java   | 496 ++++++++++++++++++++-
 1 file changed, 493 insertions(+), 3 deletions(-)

diff --git a/telephony/java/com/android/internal/telephony/RILConstants.java b/telephony/java/com/android/internal/telephony/RILConstants.java
index af79ff8ba8a5c..f380198c90f6d 100755
--- a/telephony/java/com/android/internal/telephony/RILConstants.java
+++ b/telephony/java/com/android/internal/telephony/RILConstants.java
@@ -77,7 +77,15 @@
     int SIM_SAP_MSG_SIZE_TOO_SMALL = 34;
     int SIM_SAP_CONNECT_OK_CALL_ONGOING = 35;
     int LCE_NOT_SUPPORTED = 36;               /* Link Capacity Estimation (LCE) not supported */
-    int INVALID_PARAMETER = 37;
+    // MTK
+    // int INVALID_PARAMETER = 37;
+    int EXTERNAL_APP_CAUSE_BEGIN = 2000;
+    int BT_SAP_UNDEFINED = 2001;    /*Used in Connect, Disconnect, Reset, Power on when reset fails with no reason. */
+    int BT_SAP_NOT_ACCESSIBLE = 2002;  /*Used in APDU when SIM card can't perform any commands anymore*/
+    int BT_SAP_CARD_REMOVED = 2003; /*Used in Connect, Reset, Power on when reset fails because SIM card doesn't exist*/
+    int INVALID_PARAMETER = 2004;
+    /// M: ALPS02147333 call control part
+    int CC_CALL_HOLD_FAILED_CAUSED_BY_TERMINATED = 6000;
 
     /* NETWORK_MODE_* See ril.h RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE */
     int NETWORK_MODE_WCDMA_PREF     = 0; /* GSM/WCDMA (WCDMA preferred) */
@@ -106,8 +114,20 @@
     int NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA   = 20; /* TD-SCDMA, GSM/WCDMA and LTE */
     int NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA  = 21; /*TD-SCDMA,EvDo,CDMA,GSM/WCDMA*/
     int NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA = 22; /* TD-SCDMA/LTE/GSM/WCDMA, CDMA, and EvDo */
+    // MTK
+    int MTK_PREFERRED_NETWORK_MODE  = (SystemProperties.getInt("ro.mtk_lte_support", 0) == 1) ? NETWORK_MODE_LTE_GSM_WCDMA : NETWORK_MODE_WCDMA_PREF;
     int PREFERRED_NETWORK_MODE      = SystemProperties.getInt("ro.telephony.default_network",
-            NETWORK_MODE_WCDMA_PREF);
+            MTK_PREFERRED_NETWORK_MODE);
+
+    // MTK
+    int DIAL_STRING_TOO_LONG = 1001;
+    int TEXT_STRING_TOO_LONG = 1002;
+    int SIM_MEM_FULL = 1003;
+    int ADDITIONAL_NUMBER_STRING_TOO_LONG = 1010;
+    int ADN_LIST_NOT_EXIST = 1011;
+    int ADDITIONAL_NUMBER_SAVE_FAILURE = 1012;
+    int EMAIL_SIZE_LIMIT = 1005;
+    int EMAIL_NAME_TOOLONG = 1006;
 
     int CDMA_CELL_BROADCAST_SMS_DISABLED = 1;
     int CDMA_CELL_BROADCAST_SMS_ENABLED  = 0;
@@ -158,6 +178,17 @@
     int LCE_STOPPED = 0;
     int LCE_ACTIVE = 1;
 
+    // MTK
+    /* PHB Storage type, PHB_XDN*/
+    int PHB_ADN = 0;
+    int PHB_FDN = 1;
+    int PHB_MSISDN = 2;
+    int PHB_ECC = 3;
+
+    /* Max PHB entryies to be read at once,
+        Refer to RIL_MAX_PHB_ENTRY defined in the ril_sim.c */
+    int PHB_MAX_ENTRY = 10;
+
 /*
 cat include/telephony/ril.h | \
    egrep '^#define' | \
@@ -334,7 +365,8 @@
     int RIL_REQUEST_STOP_LCE = 133;
     int RIL_REQUEST_PULL_LCEDATA = 134;
     int RIL_REQUEST_GET_ACTIVITY_INFO = 135;
-    int RIL_REQUEST_SIM_GET_ATR = 136;
+    // MTK please
+    // int RIL_REQUEST_SIM_GET_ATR = 136;
     int RIL_REQUEST_CAF_SIM_OPEN_CHANNEL_WITH_P2 = 137;
     int RIL_REQUEST_SET_MAX_TRANSMIT_POWER = 139;
 
@@ -385,4 +417,462 @@
     int RIL_UNSOL_LCEDATA_RECV = 1045;
 
     int RIL_UNSOL_STK_SEND_SMS_RESULT = 11002; /* Samsung STK */
+
+    // MTK
+
+    /* Add MTK proprietary below */
+    int RIL_REQUEST_VENDOR_BASE = 2000;
+    int RIL_REQUEST_GET_COLP = (RIL_REQUEST_VENDOR_BASE + 0);
+    int RIL_REQUEST_SET_COLP = (RIL_REQUEST_VENDOR_BASE + 1);
+    int RIL_REQUEST_GET_COLR = (RIL_REQUEST_VENDOR_BASE + 2);
+    int RIL_REQUEST_GET_CCM = (RIL_REQUEST_VENDOR_BASE + 3);
+    int RIL_REQUEST_GET_ACM = (RIL_REQUEST_VENDOR_BASE + 4);
+    int RIL_REQUEST_GET_ACMMAX = (RIL_REQUEST_VENDOR_BASE + 5);
+    int RIL_REQUEST_GET_PPU_AND_CURRENCY = (RIL_REQUEST_VENDOR_BASE + 6);
+    int RIL_REQUEST_SET_ACMMAX = (RIL_REQUEST_VENDOR_BASE + 7);
+    int RIL_REQUEST_RESET_ACM = (RIL_REQUEST_VENDOR_BASE + 8);
+    int RIL_REQUEST_SET_PPU_AND_CURRENCY = (RIL_REQUEST_VENDOR_BASE + 9);
+    int RIL_REQUEST_MODEM_POWEROFF = (RIL_REQUEST_VENDOR_BASE + 10);
+    int RIL_REQUEST_DUAL_SIM_MODE_SWITCH = (RIL_REQUEST_VENDOR_BASE + 11);
+    int RIL_REQUEST_QUERY_PHB_STORAGE_INFO = (RIL_REQUEST_VENDOR_BASE + 12);
+    int RIL_REQUEST_WRITE_PHB_ENTRY = (RIL_REQUEST_VENDOR_BASE + 13);
+    int RIL_REQUEST_READ_PHB_ENTRY = (RIL_REQUEST_VENDOR_BASE + 14);
+    int RIL_REQUEST_SET_GPRS_CONNECT_TYPE = (RIL_REQUEST_VENDOR_BASE + 15);
+    int RIL_REQUEST_SET_GPRS_TRANSFER_TYPE = (RIL_REQUEST_VENDOR_BASE + 16);
+    int RIL_REQUEST_MOBILEREVISION_AND_IMEI = (RIL_REQUEST_VENDOR_BASE + 17); //Add by mtk80372 for Barcode Number
+    int RIL_REQUEST_QUERY_SIM_NETWORK_LOCK = (RIL_REQUEST_VENDOR_BASE + 18);
+    int RIL_REQUEST_SET_SIM_NETWORK_LOCK = (RIL_REQUEST_VENDOR_BASE + 19);
+    int RIL_REQUEST_SET_SCRI = (RIL_REQUEST_VENDOR_BASE + 20);
+    int RIL_REQUEST_BTSIM_CONNECT = (RIL_REQUEST_VENDOR_BASE + 21);
+    int RIL_REQUEST_BTSIM_DISCONNECT_OR_POWEROFF = (RIL_REQUEST_VENDOR_BASE + 22);
+    int RIL_REQUEST_BTSIM_POWERON_OR_RESETSIM = (RIL_REQUEST_VENDOR_BASE + 23);
+    int RIL_REQUEST_BTSIM_TRANSFERAPDU = (RIL_REQUEST_VENDOR_BASE + 24);
+    int RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL_WITH_ACT = (RIL_REQUEST_VENDOR_BASE + 25);
+    int RIL_REQUEST_QUERY_ICCID = (RIL_REQUEST_VENDOR_BASE + 26);
+    int RIL_REQUEST_USIM_AUTHENTICATION = (RIL_REQUEST_VENDOR_BASE + 27);
+    int RIL_REQUEST_MODEM_POWERON = (RIL_REQUEST_VENDOR_BASE + 28);
+    int RIL_REQUEST_GET_SMS_SIM_MEM_STATUS = (RIL_REQUEST_VENDOR_BASE + 29);
+    /* 3G switch start */
+    int RIL_REQUEST_GET_PHONE_CAPABILITY = (RIL_REQUEST_VENDOR_BASE + 30);
+    int RIL_REQUEST_SET_PHONE_CAPABILITY = (RIL_REQUEST_VENDOR_BASE + 31);
+    /* 3G switch end */
+    /* User controlled PLMN selector with Access Technology  begin */
+    int RIL_REQUEST_GET_POL_CAPABILITY = (RIL_REQUEST_VENDOR_BASE + 32);
+    int RIL_REQUEST_GET_POL_LIST = (RIL_REQUEST_VENDOR_BASE + 33);
+    int RIL_REQUEST_SET_POL_ENTRY = (RIL_REQUEST_VENDOR_BASE + 34);
+    /* User controlled PLMN selector with Access Technology  end */
+    /* UPB start */
+    int RIL_REQUEST_QUERY_UPB_CAPABILITY = (RIL_REQUEST_VENDOR_BASE + 35);
+    int RIL_REQUEST_EDIT_UPB_ENTRY = (RIL_REQUEST_VENDOR_BASE + 36);
+    int RIL_REQUEST_DELETE_UPB_ENTRY = (RIL_REQUEST_VENDOR_BASE + 37);
+    int RIL_REQUEST_READ_UPB_GAS_LIST = (RIL_REQUEST_VENDOR_BASE + 38);
+    int RIL_REQUEST_READ_UPB_GRP = (RIL_REQUEST_VENDOR_BASE + 39);
+    int RIL_REQUEST_WRITE_UPB_GRP = (RIL_REQUEST_VENDOR_BASE + 40);
+    /* UPB end */
+    int RIL_REQUEST_SET_SIM_RECOVERY_ON = (RIL_REQUEST_VENDOR_BASE + 41);
+    int RIL_REQUEST_GET_SIM_RECOVERY_ON = (RIL_REQUEST_VENDOR_BASE + 42);
+    int RIL_REQUEST_SET_TRM = (RIL_REQUEST_VENDOR_BASE + 43);
+    int RIL_REQUEST_DETECT_SIM_MISSING = (RIL_REQUEST_VENDOR_BASE + 44);
+    int RIL_REQUEST_GET_CALIBRATION_DATA = (RIL_REQUEST_VENDOR_BASE + 45);
+
+     //For LGE APIs start
+    int RIL_REQUEST_GET_PHB_STRING_LENGTH = (RIL_REQUEST_VENDOR_BASE + 46);
+    int RIL_REQUEST_GET_PHB_MEM_STORAGE = (RIL_REQUEST_VENDOR_BASE + 47);
+    int RIL_REQUEST_SET_PHB_MEM_STORAGE = (RIL_REQUEST_VENDOR_BASE + 48);
+    int RIL_REQUEST_READ_PHB_ENTRY_EXT = (RIL_REQUEST_VENDOR_BASE + 49);
+    int RIL_REQUEST_WRITE_PHB_ENTRY_EXT = (RIL_REQUEST_VENDOR_BASE + 50);
+
+    // requests for read/write EFsmsp
+    int RIL_REQUEST_GET_SMS_PARAMS = (RIL_REQUEST_VENDOR_BASE + 51);
+    int RIL_REQUEST_SET_SMS_PARAMS = (RIL_REQUEST_VENDOR_BASE + 52);
+
+    // NFC SEEK start
+    int RIL_REQUEST_SIM_TRANSMIT_BASIC = (RIL_REQUEST_VENDOR_BASE + 53);
+    int RIL_REQUEST_SIM_TRANSMIT_CHANNEL = (RIL_REQUEST_VENDOR_BASE + 54);
+    int RIL_REQUEST_SIM_GET_ATR = (RIL_REQUEST_VENDOR_BASE + 55);
+    // NFC SEEK end
+
+    // MTK-START, SMS part, CB extension
+    int RIL_REQUEST_SET_CB_CHANNEL_CONFIG_INFO = (RIL_REQUEST_VENDOR_BASE + 56);
+    int RIL_REQUEST_SET_CB_LANGUAGE_CONFIG_INFO = (RIL_REQUEST_VENDOR_BASE + 57);
+    int RIL_REQUEST_GET_CB_CONFIG_INFO = (RIL_REQUEST_VENDOR_BASE + 58);
+    int RIL_REQUEST_SET_ALL_CB_LANGUAGE_ON = (RIL_REQUEST_VENDOR_BASE + 59);
+    // MTK-END, SMS part, CB extension
+
+    int RIL_REQUEST_SET_ETWS = (RIL_REQUEST_VENDOR_BASE + 60);
+
+    // [New R8 modem FD]
+    int RIL_REQUEST_SET_FD_MODE = (RIL_REQUEST_VENDOR_BASE + 61);
+
+    // detach PS service request
+    int RIL_REQUEST_DETACH_PS = (RIL_REQUEST_VENDOR_BASE + 62);
+
+    int RIL_REQUEST_SIM_OPEN_CHANNEL_WITH_SW = (RIL_REQUEST_VENDOR_BASE + 63); // NFC SEEK
+
+    /// M: [C2K][IR] Support SVLTE IR feature. @{
+    int RIL_REQUEST_SET_REG_SUSPEND_ENABLED  = (RIL_REQUEST_VENDOR_BASE + 64);
+    int RIL_REQUEST_RESUME_REGISTRATION  = (RIL_REQUEST_VENDOR_BASE + 65);
+    /// M: [C2K][IR] Support SVLTE IR feature. @}
+    int RIL_REQUEST_STORE_MODEM_TYPE = (RIL_REQUEST_VENDOR_BASE + 66);
+    int RIL_REQUEST_QUERY_MODEM_TYPE = (RIL_REQUEST_VENDOR_BASE + 67);
+    int RIL_REQUEST_SIM_INTERFACE_SWITCH = (RIL_REQUEST_VENDOR_BASE + 68);
+
+    //MTK-START [mtk80776] WiFi Calling
+    int RIL_REQUEST_UICC_SELECT_APPLICATION = (RIL_REQUEST_VENDOR_BASE + 69);
+    int RIL_REQUEST_UICC_DEACTIVATE_APPLICATION = (RIL_REQUEST_VENDOR_BASE + 70);
+    int RIL_REQUEST_UICC_APPLICATION_IO = (RIL_REQUEST_VENDOR_BASE + 71);
+    int RIL_REQUEST_UICC_AKA_AUTHENTICATE = (RIL_REQUEST_VENDOR_BASE + 72);
+    int RIL_REQUEST_UICC_GBA_AUTHENTICATE_BOOTSTRAP = (RIL_REQUEST_VENDOR_BASE + 73);
+    int RIL_REQUEST_UICC_GBA_AUTHENTICATE_NAF = (RIL_REQUEST_VENDOR_BASE + 74);
+    //MTK-END [mtk80776] WiFi Calling
+    int RIL_REQUEST_STK_EVDL_CALL_BY_AP = (RIL_REQUEST_VENDOR_BASE + 75);
+
+    // Femtocell (CSG)
+    int RIL_REQUEST_GET_FEMTOCELL_LIST  = (RIL_REQUEST_VENDOR_BASE + 76);
+    int RIL_REQUEST_ABORT_FEMTOCELL_LIST = (RIL_REQUEST_VENDOR_BASE + 77);
+    int RIL_REQUEST_SELECT_FEMTOCELL = (RIL_REQUEST_VENDOR_BASE + 78);
+
+    // For OPLMN update
+    int RIL_REQUEST_SEND_OPLMN = (RIL_REQUEST_VENDOR_BASE + 79);
+    int RIL_REQUEST_GET_OPLMN_VERSION = (RIL_REQUEST_VENDOR_BASE + 80);
+
+    // For PLMN List abort
+    int RIL_REQUEST_ABORT_QUERY_AVAILABLE_NETWORKS = (RIL_REQUEST_VENDOR_BASE + 81);
+    // CSD
+    int RIL_REQUEST_DIAL_UP_CSD = (RIL_REQUEST_VENDOR_BASE + 82);
+
+    // M: For telephony modes update
+    int RIL_REQUEST_SET_TELEPHONY_MODE = (RIL_REQUEST_VENDOR_BASE + 83);
+
+    /// M: CC010: Add RIL interface @{
+    int RIL_REQUEST_HANGUP_ALL = (RIL_REQUEST_VENDOR_BASE + 84);
+    int RIL_REQUEST_FORCE_RELEASE_CALL = (RIL_REQUEST_VENDOR_BASE + 85);
+    int RIL_REQUEST_SET_CALL_INDICATION = (RIL_REQUEST_VENDOR_BASE + 86);
+    int RIL_REQUEST_EMERGENCY_DIAL = (RIL_REQUEST_VENDOR_BASE + 87);
+    int RIL_REQUEST_SET_ECC_SERVICE_CATEGORY = (RIL_REQUEST_VENDOR_BASE + 88);
+    int RIL_REQUEST_SET_ECC_LIST = (RIL_REQUEST_VENDOR_BASE + 89);
+    /// @}
+
+    //New SIM Authentication
+    int RIL_REQUEST_GENERAL_SIM_AUTH = (RIL_REQUEST_VENDOR_BASE + 90);
+    //ISIM
+    int RIL_REQUEST_OPEN_ICC_APPLICATION = (RIL_REQUEST_VENDOR_BASE + 91);
+    int RIL_REQUEST_GET_ICC_APPLICATION_STATUS = (RIL_REQUEST_VENDOR_BASE + 92);
+    //SIM_IO_EX
+    int RIL_REQUEST_SIM_IO_EX = (RIL_REQUEST_VENDOR_BASE + 93);
+
+    // IMS
+    int RIL_REQUEST_SET_IMS_ENABLE = (RIL_REQUEST_VENDOR_BASE + 94);
+    int RIL_REQUEST_QUERY_AVAILABLE_NETWORKS_WITH_ACT = (RIL_REQUEST_VENDOR_BASE + 95);
+
+    /* M: SS part */
+    ///M: For query CNAP
+    int RIL_REQUEST_SEND_CNAP = (RIL_REQUEST_VENDOR_BASE + 96);
+    int RIL_REQUEST_SET_CLIP = (RIL_REQUEST_VENDOR_BASE + 97);
+    /* M: SS part end */
+
+    // MTK-START, SMS part, CB extension
+    int RIL_REQUEST_REMOVE_CB_MESSAGE = (RIL_REQUEST_VENDOR_BASE + 104);
+    // MTK-END, SMS part, CB extension
+
+    // NAS configuration for voice call
+    // 0: voice centric
+    // 1: data centric
+    int RIL_REQUEST_SET_DATA_CENTRIC = (RIL_REQUEST_VENDOR_BASE + 105);
+
+    /// M: IMS feature. @{
+    int RIL_REQUEST_ADD_IMS_CONFERENCE_CALL_MEMBER = (RIL_REQUEST_VENDOR_BASE + 106);
+    int RIL_REQUEST_REMOVE_IMS_CONFERENCE_CALL_MEMBER = (RIL_REQUEST_VENDOR_BASE + 107);
+    int RIL_REQUEST_DIAL_WITH_SIP_URI = (RIL_REQUEST_VENDOR_BASE + 108);
+    int RIL_REQUEST_RESUME_CALL = (RIL_REQUEST_VENDOR_BASE + 109);
+    /// @}
+
+    /// M: CC010: Add RIL interface @{
+    int RIL_REQUEST_SET_SPEECH_CODEC_INFO = (RIL_REQUEST_VENDOR_BASE + 110);
+    /// @}
+    /// M: CC33 LTE
+    int RIL_REQUEST_SET_DATA_ON_TO_MD = (RIL_REQUEST_VENDOR_BASE + 111);
+    int RIL_REQUEST_SET_REMOVE_RESTRICT_EUTRAN_MODE = (RIL_REQUEST_VENDOR_BASE + 112);
+
+    /// M: CC010: Add RIL interface @{
+    int RIL_REQUEST_SET_IMS_CALL_STATUS = (RIL_REQUEST_VENDOR_BASE + 113);
+    /// @}
+
+    /// M: For 3G VT only @{
+    int RIL_REQUEST_VT_DIAL = (RIL_REQUEST_VENDOR_BASE + 114);
+    int RIL_REQUEST_VOICE_ACCEPT = (RIL_REQUEST_VENDOR_BASE + 115);
+    int RIL_REQUEST_REPLACE_VT_CALL = (RIL_REQUEST_VENDOR_BASE + 116);
+    /// @}
+
+    //C2K SVLTE remote SIM access
+    int RIL_REQUEST_CONFIG_MODEM_STATUS = (RIL_REQUEST_VENDOR_BASE + 117);
+
+    // M: [C2K] MD IRAT RIL requests.
+    int RIL_REQUEST_SET_ACTIVE_PS_SLOT = RIL_REQUEST_VENDOR_BASE + 118;
+    int RIL_REQUEST_CONFIRM_INTER_3GPP_IRAT_CHANGE = RIL_REQUEST_VENDOR_BASE + 119;
+
+    /// M: [C2K][SVLTE] Set the SVLTE RAT mode. @{
+    int RIL_REQUEST_SET_SVLTE_RAT_MODE = (RIL_REQUEST_VENDOR_BASE + 120);
+    /// M: [C2K][SVLTE] Set the SVLTE RAT mode. @}
+
+    // M: [C2K] AP IRAT RIL requests.
+    int RIL_REQUEST_TRIGGER_LTE_BG_SEARCH = (RIL_REQUEST_VENDOR_BASE + 121);
+
+    /// M: IMS VoLTe conference dial feature. @{
+    int RIL_REQUEST_CONFERENCE_DIAL = (RIL_REQUEST_VENDOR_BASE + 122);
+    /// @}
+
+    /// M: CC072: Add Customer proprietary-IMS RIL interface. @{
+    /* To transfer IMS call context to modem */
+    int RIL_REQUEST_SET_SRVCC_CALL_CONTEXT_TRANSFER = (RIL_REQUEST_VENDOR_BASE + 123);
+    /* To update IMS registration status to modem */
+    int RIL_REQUEST_UPDATE_IMS_REGISTRATION_STATUS = (RIL_REQUEST_VENDOR_BASE + 124);
+    /// @}
+
+    int RIL_REQUEST_RELOAD_MODEM_TYPE = (RIL_REQUEST_VENDOR_BASE + 125);
+
+    /// M: IMS feature. @{
+    int RIL_REQUEST_HOLD_CALL = (RIL_REQUEST_VENDOR_BASE + 126);
+    /// @}
+
+    /// M: [C2K][SVLTE] Set the STK UTK mode. @{
+    int RIL_REQUEST_SET_STK_UTK_MODE = (RIL_REQUEST_VENDOR_BASE + 127);
+    /// M: [C2K][SVLTE] Set the STK UTK mode. @}
+
+    int RIL_REQUEST_SWITCH_ANTENNA = (RIL_REQUEST_VENDOR_BASE + 128);
+
+    // M:[C2K] deactivate link down PDN. @{
+    int RIL_REQUEST_DEACTIVATE_LINK_DOWN_PDN = (RIL_REQUEST_VENDOR_BASE + 129);
+    ///@}
+    int RIL_REQUEST_AT_COMMAND_WITH_PROXY = (RIL_REQUEST_VENDOR_BASE + 130);
+    int RIL_REQUEST_SWITCH_CARD_TYPE = (RIL_REQUEST_VENDOR_BASE + 131);
+
+    int RIL_REQUEST_ENABLE_MD3_SLEEP = (RIL_REQUEST_VENDOR_BASE + 132);
+
+    /// M: IMS ViLTe feature. @{
+    int RIL_REQUEST_VIDEO_CALL_ACCEPT = (RIL_REQUEST_VENDOR_BASE + 133);
+    /// @}
+
+    // M: [LTE][Low Power][UL traffic shaping] Start
+    int RIL_REQUEST_SET_LTE_ACCESS_STRATUM_REPORT = (RIL_REQUEST_VENDOR_BASE + 134);
+    int RIL_REQUEST_SET_LTE_UPLINK_DATA_TRANSFER = (RIL_REQUEST_VENDOR_BASE + 135);
+    // M: [LTE][Low Power][UL traffic shaping] End
+
+    /// M: [EPDG] WiFi disconnect indication @{
+    int RIL_REQUEST_WIFI_DISCONNECT_IND = (RIL_REQUEST_VENDOR_BASE + 137);
+    /// @}
+
+    /// M: EPDG feature. Update PS state from MAL @{
+    int RIL_REQUEST_MAL_PS_RGEGISTRATION_STATE = (RIL_REQUEST_VENDOR_BASE + 138);
+    /// @}
+
+    int RIL_REQUEST_EVDO_SUPPORT_BASE = 2100;
+    int RIL_REQUEST_RADIO_POWER_CARD_SWITCH = (RIL_REQUEST_EVDO_SUPPORT_BASE + 0);
+
+    int RIL_UNSOL_VENDOR_BASE = 3000;
+    int RIL_UNSOL_NEIGHBORING_CELL_INFO = (RIL_UNSOL_VENDOR_BASE + 0);
+    int RIL_UNSOL_NETWORK_INFO = (RIL_UNSOL_VENDOR_BASE + 1);
+    int RIL_UNSOL_PHB_READY_NOTIFICATION = (RIL_UNSOL_VENDOR_BASE + 2);
+    int RIL_UNSOL_SIM_INSERTED_STATUS = (RIL_UNSOL_VENDOR_BASE + 3);
+    int RIL_UNSOL_RADIO_TEMPORARILY_UNAVAILABLE = (RIL_UNSOL_VENDOR_BASE + 4);
+    int RIL_UNSOL_ME_SMS_STORAGE_FULL = (RIL_UNSOL_VENDOR_BASE + 5);
+    int RIL_UNSOL_SMS_READY_NOTIFICATION = (RIL_UNSOL_VENDOR_BASE + 6);
+    int RIL_UNSOL_SCRI_RESULT = (RIL_UNSOL_VENDOR_BASE + 7);
+    int RIL_UNSOL_SIM_MISSING = (RIL_UNSOL_VENDOR_BASE + 8);
+    int RIL_UNSOL_GPRS_DETACH = (RIL_UNSOL_VENDOR_BASE + 9);
+    //MTK-START [mtk04070][120208][ALPS00233196] ATCI for unsolicited response
+    int RIL_UNSOL_ATCI_RESPONSE = (RIL_UNSOL_VENDOR_BASE + 10);
+    //MTK-END [mtk04070][120208][ALPS00233196] ATCI for unsolicited response
+    int RIL_UNSOL_SIM_RECOVERY = (RIL_UNSOL_VENDOR_BASE + 11);
+    int RIL_UNSOL_VIRTUAL_SIM_ON = (RIL_UNSOL_VENDOR_BASE + 12);
+    int RIL_UNSOL_VIRTUAL_SIM_OFF = (RIL_UNSOL_VENDOR_BASE + 13);
+    int RIL_UNSOL_INVALID_SIM = (RIL_UNSOL_VENDOR_BASE + 14);
+    int RIL_UNSOL_RESPONSE_PS_NETWORK_STATE_CHANGED = (RIL_UNSOL_VENDOR_BASE + 15);
+    int RIL_UNSOL_RESPONSE_ACMT = (RIL_UNSOL_VENDOR_BASE + 16);
+    int RIL_UNSOL_EF_CSP_PLMN_MODE_BIT = (RIL_UNSOL_VENDOR_BASE + 17);
+    int RIL_UNSOL_IMEI_LOCK = (RIL_UNSOL_VENDOR_BASE + 18);
+    int RIL_UNSOL_RESPONSE_MMRR_STATUS_CHANGED = (RIL_UNSOL_VENDOR_BASE + 19);
+    int RIL_UNSOL_SIM_PLUG_OUT = (RIL_UNSOL_VENDOR_BASE + 20);
+    int RIL_UNSOL_SIM_PLUG_IN = (RIL_UNSOL_VENDOR_BASE + 21);
+    int RIL_UNSOL_RESPONSE_ETWS_NOTIFICATION = (RIL_UNSOL_VENDOR_BASE + 22);
+    int RIL_UNSOL_RESPONSE_PLMN_CHANGED = (RIL_UNSOL_VENDOR_BASE + 23);
+    int RIL_UNSOL_RESPONSE_REGISTRATION_SUSPENDED = (RIL_UNSOL_VENDOR_BASE + 24);
+    int RIL_UNSOL_STK_EVDL_CALL = (RIL_UNSOL_VENDOR_BASE + 25);
+    int RIL_UNSOL_DATA_PACKETS_FLUSH = (RIL_UNSOL_VENDOR_BASE + 26);
+    int RIL_UNSOL_FEMTOCELL_INFO = (RIL_UNSOL_VENDOR_BASE + 27);
+    int RIL_UNSOL_STK_SETUP_MENU_RESET = (RIL_UNSOL_VENDOR_BASE + 28);
+    int RIL_UNSOL_APPLICATION_SESSION_ID_CHANGED = (RIL_UNSOL_VENDOR_BASE + 29);
+    /// M: For updating call ids for conference call after SRVCC is done.
+    int RIL_UNSOL_ECONF_SRVCC_INDICATION = (RIL_UNSOL_VENDOR_BASE + 30);
+    // IMS
+    int RIL_UNSOL_IMS_ENABLE_DONE = (RIL_UNSOL_VENDOR_BASE + 31);
+    int RIL_UNSOL_IMS_DISABLE_DONE = (RIL_UNSOL_VENDOR_BASE + 32);
+    int RIL_UNSOL_IMS_REGISTRATION_INFO = (RIL_UNSOL_VENDOR_BASE + 33);
+
+    //sm cause rac
+    int RIL_UNSOL_RAC_UPDATE = (RIL_UNSOL_VENDOR_BASE + 37);
+
+    //[VoLTE]Conf. call merged/added result
+    int RIL_UNSOL_ECONF_RESULT_INDICATION = (RIL_UNSOL_VENDOR_BASE + 38);
+
+    //Remote SIM ME lock related APIs [Start]
+    int RIL_UNSOL_MELOCK_NOTIFICATION = (RIL_UNSOL_VENDOR_BASE + 39);
+    //Remote SIM ME lock related APIs [END]
+
+    /// M: CC010: Add RIL interface @{
+    int RIL_UNSOL_CALL_FORWARDING = (RIL_UNSOL_VENDOR_BASE + 40);
+    int RIL_UNSOL_CRSS_NOTIFICATION = (RIL_UNSOL_VENDOR_BASE + 41);
+    int RIL_UNSOL_INCOMING_CALL_INDICATION = (RIL_UNSOL_VENDOR_BASE + 42);
+    int RIL_UNSOL_CIPHER_INDICATION = (RIL_UNSOL_VENDOR_BASE + 43);
+    int RIL_UNSOL_CNAP = (RIL_UNSOL_VENDOR_BASE + 44); //obsolete
+    /// @}
+    int RIL_UNSOL_SIM_COMMON_SLOT_NO_CHANGED = (RIL_UNSOL_VENDOR_BASE + 45);
+    //Combine attach
+    int RIL_UNSOL_DATA_ALLOWED = (RIL_UNSOL_VENDOR_BASE + 46);
+    int RIL_UNSOL_STK_CALL_CTRL = (RIL_UNSOL_VENDOR_BASE + 47);
+    int RIL_UNSOL_VOLTE_EPS_NETWORK_FEATURE_SUPPORT = (RIL_UNSOL_VENDOR_BASE + 48);
+
+    /// M: IMS feature. @{
+    int RIL_UNSOL_CALL_INFO_INDICATION = (RIL_UNSOL_VENDOR_BASE + 49);
+    /// @}
+
+    int RIL_UNSOL_VOLTE_EPS_NETWORK_FEATURE_INFO = (RIL_UNSOL_VENDOR_BASE + 50);
+    int RIL_UNSOL_SRVCC_HANDOVER_INFO_INDICATION = (RIL_UNSOL_VENDOR_BASE + 51);
+    /// M: CC010: Add RIL interface @{
+    int RIL_UNSOL_SPEECH_CODEC_INFO = (RIL_UNSOL_VENDOR_BASE + 52);
+    /// @}
+
+    //MTK-START for MD state change
+    int RIL_UNSOL_MD_STATE_CHANGE = (RIL_UNSOL_VENDOR_BASE + 53);
+    //MTK-END for MD state change
+    // M: CC33 URC
+    int RIL_UNSOL_REMOVE_RESTRICT_EUTRAN = (RIL_UNSOL_VENDOR_BASE + 54);
+
+    // IMS client on AP shall get the information of MO Data Barring and SSAC barring
+    int RIL_UNSOL_MO_DATA_BARRING_INFO = (RIL_UNSOL_VENDOR_BASE + 55);
+    int RIL_UNSOL_SSAC_BARRING_INFO = (RIL_UNSOL_VENDOR_BASE + 56);
+    int RIL_UNSOL_SIP_CALL_PROGRESS_INDICATOR = (RIL_UNSOL_VENDOR_BASE + 57);
+
+    int RIL_UNSOL_ABNORMAL_EVENT = (RIL_UNSOL_VENDOR_BASE + 58);
+
+    /// M: CC071: Add Customer proprietary-IMS RIL interface . @{
+    int RIL_UNSOL_EMERGENCY_BEARER_SUPPORT_NOTIFY = (RIL_UNSOL_VENDOR_BASE + 59);
+    /// @}
+
+    /// M: [C2K] MD IRAT RIL URCs.
+    int RIL_UNSOL_INTER_3GPP_IRAT_STATE_CHANGE = RIL_UNSOL_VENDOR_BASE + 60;
+
+    // M: [C2K] AP IRAT RIL URCs.
+    int RIL_UNSOL_LTE_BG_SEARCH_STATUS = (RIL_UNSOL_VENDOR_BASE + 61);
+
+    /// M: [C2K][IR][MD-IRAT] URC for GMSS RAT changed. @{
+    int RIL_UNSOL_GMSS_RAT_CHANGED = (RIL_UNSOL_VENDOR_BASE + 62);
+    /// M: [C2K][IR][MD-IRAT] URC for GMSS RAT changed. @}
+
+    int RIL_UNSOL_CDMA_CARD_TYPE = (RIL_UNSOL_VENDOR_BASE + 63);
+
+    // IMS
+    int RIL_UNSOL_IMS_ENABLE_START = (RIL_UNSOL_VENDOR_BASE + 64);
+    int RIL_UNSOL_IMS_DISABLE_START = (RIL_UNSOL_VENDOR_BASE + 65);
+    int RIL_UNSOL_IMSI_REFRESH_DONE = (RIL_UNSOL_VENDOR_BASE + 66);
+    // M: Notify RILJ that the AT+EUSIM was received
+    int RIL_UNSOL_EUSIM_READY = (RIL_UNSOL_VENDOR_BASE + 67);
+    /// M: BIP {
+    int RIL_UNSOL_STK_BIP_PROACTIVE_COMMAND = (RIL_UNSOL_VENDOR_BASE + 68);
+    /// M: BIP }
+    //WorldMode
+    int RIL_UNSOL_WORLD_MODE_CHANGED = (RIL_UNSOL_VENDOR_BASE + 69);
+
+    /// M: For 3G VT only @{
+    int RIL_UNSOL_VT_STATUS_INFO = (RIL_UNSOL_VENDOR_BASE + 70);
+    int RIL_UNSOL_VT_RING_INFO = (RIL_UNSOL_VENDOR_BASE + 71);
+    /// @}
+
+    //External SIM [Start]
+    int RIL_UNSOL_VSIM_OPERATION_INDICATION = (RIL_UNSOL_VENDOR_BASE + 72);
+    //External SIM [End]
+
+    //Reset Attach APN
+    int RIL_UNSOL_SET_ATTACH_APN = (RIL_UNSOL_VENDOR_BASE + 73);
+
+    /// M: MAL @{
+    int RIL_UNSOL_MAL_AT_INFO = (RIL_UNSOL_VENDOR_BASE + 74);
+    //info the current 3G SIM
+    int RIL_UNSOL_MAIN_SIM_INFO = (RIL_UNSOL_VENDOR_BASE + 75);
+    /// @}
+    // M: The event for pluggin in the tray in common slot project
+    int RIL_UNSOL_TRAY_PLUG_IN = (RIL_UNSOL_VENDOR_BASE + 76);
+
+    // M: volte for call mode change notification
+    int RIL_UNSOL_CALLMOD_CHANGE_INDICATOR = (RIL_UNSOL_VENDOR_BASE + 77);
+
+    // M: vilte for video capability notification
+    int RIL_UNSOL_VIDEO_CAPABILITY_INDICATOR = (RIL_UNSOL_VENDOR_BASE + 78);
+
+    // M: [LTE][Low Power][UL traffic shaping] Start
+    int RIL_UNSOL_LTE_ACCESS_STRATUM_STATE_CHANGE = (RIL_UNSOL_VENDOR_BASE + 79);
+    // M: [LTE][Low Power][UL traffic shaping] End
+
+    /* M: Add C2K proprietary start */
+    int RIL_REQUEST_C2K_BASE = 4000;
+    int RIL_REQUEST_GET_NITZ_TIME = (RIL_REQUEST_C2K_BASE + 0);
+    int RIL_REQUEST_QUERY_UIM_INSERTED = (RIL_REQUEST_C2K_BASE + 1);
+    int RIL_REQUEST_SWITCH_HPF = (RIL_REQUEST_C2K_BASE + 2);
+    int RIL_REQUEST_SET_AVOID_SYS = (RIL_REQUEST_C2K_BASE + 3);
+    int RIL_REQUEST_QUERY_AVOID_SYS = (RIL_REQUEST_C2K_BASE + 4);
+    int RIL_REQUEST_QUERY_CDMA_NETWORK_INFO = (RIL_REQUEST_C2K_BASE + 5);
+    int RIL_REQUEST_GET_LOCAL_INFO =  (RIL_REQUEST_C2K_BASE + 6);
+    int RIL_REQUEST_UTK_REFRESH = (RIL_REQUEST_C2K_BASE + 7);
+    int RIL_REQUEST_QUERY_SMS_AND_PHONEBOOK_STATUS = (RIL_REQUEST_C2K_BASE + 8);
+    int RIL_REQUEST_QUERY_NETWORK_REGISTRATION = (RIL_REQUEST_C2K_BASE + 9);
+    int RIL_REQUEST_AGPS_TCP_CONNIND = (RIL_REQUEST_C2K_BASE + 10);
+    int RIL_REQUEST_AGPS_SET_MPC_IPPORT = (RIL_REQUEST_C2K_BASE + 11);
+    int RIL_REQUEST_AGPS_GET_MPC_IPPORT = (RIL_REQUEST_C2K_BASE + 12);
+    int RIL_REQUEST_SET_MEID = (RIL_REQUEST_C2K_BASE + 13);
+    /// M: [C2K][IR] Support SVLTE IR feature. @{
+    int RIL_REQUEST_RESUME_REGISTRATION_CDMA = (RIL_REQUEST_C2K_BASE + 14);
+    int RIL_REQUEST_SET_REG_SUSPEND_ENABLED_CDMA = (RIL_REQUEST_C2K_BASE + 15);
+    /// M: [C2K][IR] Support SVLTE IR feature. @}
+    int RIL_REQUEST_SET_ETS_DEV = (RIL_REQUEST_C2K_BASE + 16);
+    int RIL_REQUEST_WRITE_MDN = (RIL_REQUEST_C2K_BASE + 17);
+    int RIL_REQUEST_SET_VIA_TRM = (RIL_REQUEST_C2K_BASE + 18);
+    int RIL_REQUEST_SET_ARSI_THRESHOLD = (RIL_REQUEST_C2K_BASE + 19);
+
+    // [C2K] [AP IRAT] RIL request.
+    int RIL_REQUEST_SET_LTE_EARFCN_ENABLED = (RIL_REQUEST_C2K_BASE + 20);
+    // [C2K] [SVLTE] C2K SVLTE CDMA RAT control.
+    int RIL_REQUEST_CONFIG_IRAT_MODE = (RIL_REQUEST_C2K_BASE + 21);
+
+   // [C2K][SVLTE] C2K SVLTE CDMA eHPRD control
+    int RIL_REQUEST_CONFIG_EVDO_MODE = (RIL_REQUEST_C2K_BASE + 22);
+    /* M: SVLTE UTK part start */
+    int RIL_REQUEST_QUERY_UTK_MENU_FROM_MD = (RIL_REQUEST_C2K_BASE + 23);
+    int RIL_REQUEST_QUERY_STK_MENU_FROM_MD = (RIL_REQUEST_C2K_BASE + 24);
+    /* M: SVLTE UTK part end */
+
+    int RIL_UNSOL_C2K_BASE = 5000;
+    int RIL_UNSOL_CDMA_CALL_ACCEPTED = (RIL_UNSOL_C2K_BASE + 0);
+    int RIL_UNSOL_UTK_SESSION_END = (RIL_UNSOL_C2K_BASE + 1);
+    int RIL_UNSOL_UTK_PROACTIVE_COMMAND = (RIL_UNSOL_C2K_BASE + 2);
+    int RIL_UNSOL_UTK_EVENT_NOTIFY = (RIL_UNSOL_C2K_BASE + 3);
+    int RIL_UNSOL_VIA_GPS_EVENT = (RIL_UNSOL_C2K_BASE + 4);
+    int RIL_UNSOL_VIA_NETWORK_TYPE_CHANGE = (RIL_UNSOL_C2K_BASE + 5);
+    /// M: [C2K][IR] Support SVLTE IR feature. @{
+    int RIL_UNSOL_CDMA_PLMN_CHANGED = (RIL_UNSOL_C2K_BASE + 6);
+    /// M: [C2K][IR] Support SVLTE IR feature. @}
+    int RIL_UNSOL_VIA_INVALID_SIM_DETECTED = (RIL_UNSOL_C2K_BASE + 7);
+    /// M: For c2k eng mode
+    int RIL_UNSOL_ENG_MODE_NETWORK_INFO = (RIL_UNSOL_C2K_BASE + 8);
+    // M: [C2K] for ps type changed.
+    int RIL_UNSOL_RESPONSE_DATA_NETWORK_TYPE_CHANGED = (RIL_UNSOL_C2K_BASE + 9);
+    // [C2K] [AP IRAT] URCs
+    int RIL_UNSOL_LTE_EARFCN_INFO = (RIL_UNSOL_C2K_BASE + 10);
+    int RIL_UNSOL_CDMA_IMSI_READY = (RIL_UNSOL_C2K_BASE + 11);
+    // M: Notify RILJ that call fade happened
+    int RIL_UNSOL_CDMA_SIGNAL_FADE = (RIL_UNSOL_C2K_BASE + 12);
+    // M: Notify RILJ that the AT+EFNM was received
+    int RIL_UNSOL_CDMA_TONE_SIGNALS = (RIL_UNSOL_C2K_BASE + 13);
+    // M: add for ECC only
+    int RIL_UNSOL_NETWORK_EXIST = (RIL_UNSOL_C2K_BASE + 14);
+    /* M: Add C2K proprietary end */
 }
