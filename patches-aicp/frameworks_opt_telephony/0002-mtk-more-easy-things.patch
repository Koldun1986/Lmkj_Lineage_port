From b8eab741cacc8072a53269781893f4d1b7e9c627 Mon Sep 17 00:00:00 2001
From: Wang Xuerui <idontknw.wang@gmail.com>
Date: Fri, 25 Mar 2016 17:25:45 +0800
Subject: [PATCH] mtk: more easy things

Change-Id: Ife8ad1b5d2a4bbd89b538c1bdeb7a15fc824d099
---
 .../mediatek/internal/telephony/FemtoCellInfo.aidl |  19 ++
 .../mediatek/internal/telephony/FemtoCellInfo.java | 154 ++++++++++
 .../internal/telephony/SrvccCallContext.java       | 330 +++++++++++++++++++++
 .../internal/telephony/ltedc/LteDcConstants.java   |  17 ++
 4 files changed, 520 insertions(+)
 create mode 100755 src/java/com/mediatek/internal/telephony/FemtoCellInfo.aidl
 create mode 100755 src/java/com/mediatek/internal/telephony/FemtoCellInfo.java
 create mode 100755 src/java/com/mediatek/internal/telephony/SrvccCallContext.java
 create mode 100644 src/java/com/mediatek/internal/telephony/ltedc/LteDcConstants.java

diff --git a/src/java/com/mediatek/internal/telephony/FemtoCellInfo.aidl b/src/java/com/mediatek/internal/telephony/FemtoCellInfo.aidl
new file mode 100755
index 0000000000..2ee8f03ca3
--- /dev/null
+++ b/src/java/com/mediatek/internal/telephony/FemtoCellInfo.aidl
@@ -0,0 +1,19 @@
+/*
+** Copyright 2007, The Android Open Source Project
+**
+** Licensed under the Apache License, Version 2.0 (the "License");
+** you may not use this file except in compliance with the License.
+** You may obtain a copy of the License at
+**
+**     http://www.apache.org/licenses/LICENSE-2.0
+**
+** Unless required by applicable law or agreed to in writing, software
+** distributed under the License is distributed on an "AS IS" BASIS,
+** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+** See the License for the specific language governing permissions and
+** limitations under the License.
+*/
+
+package com.mediatek.internal.telephony;
+
+parcelable FemtoCellInfo;
diff --git a/src/java/com/mediatek/internal/telephony/FemtoCellInfo.java b/src/java/com/mediatek/internal/telephony/FemtoCellInfo.java
new file mode 100755
index 0000000000..173f1f2288
--- /dev/null
+++ b/src/java/com/mediatek/internal/telephony/FemtoCellInfo.java
@@ -0,0 +1,154 @@
+/*
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.mediatek.internal.telephony;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+/**
+ * {@hide}
+ */
+public class FemtoCellInfo implements Parcelable {
+    /* This CSG is Not in EFACSGL nor in EFOCSGL */
+    public static final int CSG_ICON_TYPE_NOT_ALLOWED = 0;
+
+    /* This CSG is in Allowed CSG List (EFACSGL) */
+    public static final int CSG_ICON_TYPE_ALLOWED = 1;
+
+    /* This CSG is in Operator CSG List (EFOCSGL) */
+    public static final int CSG_ICON_TYPE_OPERATOR = 2;
+
+    /* This CSG is in Operator CSGs. However, it is unauthorized, meaning that UE's registration has been rejected by cause #25.*/
+    public static final int CSG_ICON_TYPE_OPERATOR_UNAUTHORIZED = 3;
+
+    private int csgId;
+    private int csgIconType; /* FemtoCellInfo.CSG_ICON_TYPE_xxx */
+    private String homeNodeBName;
+    private String operatorNumeric; /* ex: "46000" */
+    private String operatorAlphaLong; /* ex: "China Mobile" */
+    private int rat = 0; /* ServiceState.RIL_RADIO_TECHNOLOGY_xxx */
+
+/**
+ * Get registered CSG Id
+ * @internal
+ */
+    public int getCsgId() {
+        return csgId;
+    }
+
+/**
+ * Get registered CSG Icon Type
+ * @internal
+ */
+    public int getCsgIconType() {
+        return csgIconType;
+    }
+
+/**
+ * Get Home NodeB Name(if exist)
+ * @internal
+ */
+    public String getHomeNodeBName() {
+        return homeNodeBName;
+    }
+
+/**
+ * Get registered CSG Rat information
+ */
+    public int getCsgRat() {
+        return rat;
+    }
+
+/**
+ * Get registered operator numeric code
+ */
+    public String getOperatorNumeric() {
+        return operatorNumeric;
+    }
+
+/**
+ * Get registered operator alphanumeric long name
+ * @internal
+ */
+    public String getOperatorAlphaLong() {
+        return operatorAlphaLong;
+    }
+
+    public FemtoCellInfo(int csgId, int csgIconType, String homeNodeBName, String operatorNumeric, String operatorAlphaLong, int rat) {
+        this.csgId = csgId;
+        this.csgIconType = csgIconType;
+        this.homeNodeBName = homeNodeBName;
+        this.operatorNumeric = operatorNumeric;
+        this.operatorAlphaLong = operatorAlphaLong;
+        this.rat = rat;
+    }
+
+    public String toString() {
+        return "FemtoCellInfo " + csgId
+                + "/" + csgIconType
+                + "/" + homeNodeBName
+                + "/" + operatorNumeric
+                + "/" + operatorAlphaLong
+                + "/" + rat;
+    }
+
+    /**
+     * Parcelable interface implemented below.
+     * This is a simple effort to make FemtoCellInfo parcelable rather than
+     * trying to make the conventional containing object (AsyncResult),
+     * implement parcelable.
+     */
+
+    public int describeContents() {
+        return 0;
+    }
+
+    /**
+     * Implement the Parcelable interface.
+     * Method to serialize a FemtoCellInfo object.
+     */
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeInt(csgId);
+        dest.writeInt(csgIconType);
+        dest.writeString(homeNodeBName);
+        dest.writeString(operatorNumeric);
+        dest.writeString(operatorAlphaLong);
+        dest.writeInt(rat);
+    }
+
+    /**
+     * Implement the Parcelable interface
+     * Method to deserialize a FemtoCellInfo object, or an array thereof.
+     */
+    public static final Creator<FemtoCellInfo> CREATOR =
+        new Creator<FemtoCellInfo>() {
+            public FemtoCellInfo createFromParcel(Parcel in) {
+                FemtoCellInfo femtoCellInfo = new FemtoCellInfo(
+                        in.readInt(), /*csgId*/
+                        in.readInt(), /*csgIconType*/
+                        in.readString(), /*homeNodeBName*/
+                        in.readString(), /*operatorNumeric*/
+                        in.readString(), /*operatorAlphaLong*/
+                        in.readInt()); /*rat*/
+                return femtoCellInfo;
+            }
+
+            public FemtoCellInfo[] newArray(int size) {
+                return new FemtoCellInfo[size];
+            }
+        };
+}
+
diff --git a/src/java/com/mediatek/internal/telephony/SrvccCallContext.java b/src/java/com/mediatek/internal/telephony/SrvccCallContext.java
new file mode 100755
index 0000000000..e0145d8115
--- /dev/null
+++ b/src/java/com/mediatek/internal/telephony/SrvccCallContext.java
@@ -0,0 +1,330 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ *
+ * MediaTek Inc. (C) 2014. All rights reserved.
+ *
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+ *
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+
+package com.mediatek.internal.telephony;
+
+/**
+ * To pass IMS call context to CS modem.
+ * {@hide}
+ */
+public class SrvccCallContext {
+    /* Between 1 and 7 */
+    private int mCallId;
+
+    /*
+       0: voice call
+       1: video call
+       2: emergency call
+       3: voice conference call
+       other values are reserved for future extend
+     */
+    private int mCallMode;
+
+    /*
+       0: MO call
+       1: MT call
+     */
+    private int mCallDirection;
+
+    /*
+       0: Early
+       1: Early with media (already attached speech in Alerting state)
+       2: Active
+       3: On Hold
+     */
+    private int mCallState;
+
+    /*
+       0x0000: unspecified
+       0x0001: police
+       0x0002: ambulance
+       0x0004: fire brigade
+       0x0008: marine guard
+       0x0010: mountain rescue
+       0x0020: gas
+       0x0040: animal
+       0x0080: physician
+       0x0100: poison
+       0xFFFF: not emergency call
+     */
+    private int mEccCategory;
+
+
+
+    /*
+      1: URI format
+      2: BCD format
+    */
+    private int mNumberType;
+
+    private String mNumber;
+
+    private String mName;
+
+    /*
+      <CLI validity>: integer type. This parameter can provide details why <number>
+      does not contain a calling party BCD number (refer 3GPP TS 24.008 [8] subclause
+      10.5.4.30). The parameter is not present for MO call
+      types.
+      0 CLI valid
+      1 CLI has been withheld by the originator (refer 3GPP TS 24.008 [8] table 10.5.135a/
+        3GPP TS 24.008 code "Reject by user")
+      2 CLI is not available due to interworking problems or limitations of originating
+        network (refer 3GPP TS 24.008 [8] table 10.5.135a/3GPP TS 24.008 code
+        "Interaction with other service")
+      3 CLI is not available due to calling party being of type payphone
+        (refer 3GPP TS 24.008 [8] table 10.5.135a/3GPP TS 24.008 code "Coin line/payphone")
+      4 CLI is not available due to other reasons (refer 3GPP TS 24.008 [8] table 10.5.135a/
+        3GPP TS 24.008 code "Unavailable")    */
+    private int mCliValidity;
+
+    /**
+     * Constructor function.
+     *
+     * @param callId call id.
+     * @param callMode call mode.
+     * @param callDirection call direction.
+     * @param callState call state.
+     * @param eccCategory emergency category.
+     * @param numberType number type.
+     * @param phoneNumber phone number.
+     * @param name Name information.
+     * @param cliValidity CLI validity.
+     *
+     *
+     */
+    public SrvccCallContext(int callId,
+                            int callMode,
+                            int callDirection,
+                            int callState,
+                            int eccCategory,
+                            int numberType,
+                            String phoneNumber,
+                            String name,
+                            int cliValidity) {
+        mCallId = callId;
+        mCallMode = callMode;
+        mCallDirection = callDirection;
+        mCallState = callState;
+        mEccCategory = eccCategory;
+        mNumberType = numberType;
+        mNumber = phoneNumber;
+        mName = name;
+        mCliValidity = cliValidity;
+    }
+
+    /**
+     * Set call id.
+     *
+     * @param callId call id.
+     *
+     */
+    public void setCallId(int callId) {
+          mCallId = callId;
+    }
+
+    /**
+     * Set call mode.
+     *
+     * @param callMode call mode.
+     *
+     */
+    public void setCallMode(int callMode) {
+          mCallMode = callMode;
+    }
+
+    /**
+     * Set call direction.
+     *
+     * @param callDirection call direction.
+     *
+     */
+    public void setCallDirection(int callDirection) {
+          mCallDirection = callDirection;
+    }
+
+    /**
+     * Set call state.
+     *
+     * @param callState call state.
+     *
+     */
+    public void setCallState(int callState) {
+          mCallState = callState;
+    }
+
+    /**
+     * Set emergency category.
+     *
+     * @param eccCategory emergency category.
+     *
+     */
+    public void setEccCategory(int eccCategory) {
+          mEccCategory = eccCategory;
+    }
+
+    /**
+     * Set number type.
+     *
+     * @param numberType number type.
+     *
+     */
+    public void setNumberType(int numberType) {
+          mNumberType = numberType;
+    }
+
+    /**
+     * Set number.
+     *
+     * @param phoneNumber phone number.
+     *
+     */
+    public void setCallState(String phoneNumber) {
+          mNumber = phoneNumber;
+    }
+
+    /**
+     * Set name.
+     *
+     * @param name Name information.
+     *
+     */
+    public void setName(String name) {
+          mName = name;
+    }
+
+    /**
+     * Set CLI validity.
+     *
+     * @param cliValidity CLI validity.
+     *
+     */
+    public void setCliValidity(int cliValidity) {
+          mCliValidity = cliValidity;
+    }
+
+    /**
+     * Retrieve call id.
+     *
+     * @return call id.
+     *
+     */
+    public int getCallId() {
+          return mCallId;
+    }
+
+    /**
+     * Retrieve call mode.
+     *
+     * @return call mode.
+     *
+     */
+    public int getCallMode() {
+          return mCallMode;
+    }
+
+    /**
+     * Retrieve call direction.
+     *
+     * @return call direction.
+     *
+     */
+    public int getCallDirection() {
+          return mCallDirection;
+    }
+
+    /**
+     * Retrieve call state.
+     *
+     * @return call state.
+     *
+     */
+    public int getCallState() {
+          return mCallState;
+    }
+
+    /**
+     * Retrieve emergency category.
+     *
+     * @return emergency category.
+     *
+     */
+    public int getEccCategory() {
+          return mEccCategory;
+    }
+
+    /**
+     * Retrieve number type.
+     *
+     * @return number type.
+     *
+     */
+    public int getNumberType() {
+          return mNumberType;
+    }
+
+    /**
+     * Retrieve phone number.
+     *
+     * @return phone number.
+     *
+     */
+    public String getNumber() {
+          return mNumber;
+    }
+
+    /**
+     * Retrieve name.
+     *
+     * @return name.
+     *
+     */
+    public String getName() {
+          return mName;
+    }
+
+    /**
+     * Retrieve CLI validity.
+     *
+     * @return CLI validity.
+     *
+     */
+    public int getCliValidity() {
+          return mCliValidity;
+    }
+}
\ No newline at end of file
diff --git a/src/java/com/mediatek/internal/telephony/ltedc/LteDcConstants.java b/src/java/com/mediatek/internal/telephony/ltedc/LteDcConstants.java
new file mode 100644
index 0000000000..d9b1edbe14
--- /dev/null
+++ b/src/java/com/mediatek/internal/telephony/ltedc/LteDcConstants.java
@@ -0,0 +1,17 @@
+package com.mediatek.internal.telephony.ltedc;
+
+/**
+ * LTE DC constants for reference.
+ */
+public final class LteDcConstants {
+    // Attention to not overlap with Google default DctConstants.
+    public static final int BASE_IRAT_DATA_CONNECTION = 0x00045000;
+    public static final int EVENT_IRAT_DATA_RAT_CHANGED = BASE_IRAT_DATA_CONNECTION + 0;
+    public static final int EVENT_LTE_RECORDS_LOADED = BASE_IRAT_DATA_CONNECTION + 1;
+    public static final int EVENT_RETRY_SETUP_DATA_FOR_IRAT = BASE_IRAT_DATA_CONNECTION + 2;
+
+    // PS service is on CDMA or LTE.
+    public static final int PS_SERVICE_UNKNOWN = -1;
+    public static final int PS_SERVICE_ON_CDMA = 0;
+    public static final int PS_SERVICE_ON_LTE = 1;
+}
