From cdb90ac8ea89e7913804c3d6d8c5733182e26d7b Mon Sep 17 00:00:00 2001
From: Wang Xuerui <idontknw.wang@gmail.com>
Date: Sat, 26 Mar 2016 16:22:37 +0800
Subject: [PATCH] RIL: add minimal MTK bits

Change-Id: Idf68d8b614e19a7c8eef187b64de9c1c79061cd1
---
 src/java/com/android/internal/telephony/RIL.java | 89 ++++++++++++++++++------
 1 file changed, 66 insertions(+), 23 deletions(-)

diff --git a/src/java/com/android/internal/telephony/RIL.java b/src/java/com/android/internal/telephony/RIL.java
index 9efc573cdf..4e372e6d03 100644
--- a/src/java/com/android/internal/telephony/RIL.java
+++ b/src/java/com/android/internal/telephony/RIL.java
@@ -82,6 +82,8 @@
 import com.android.internal.telephony.TelephonyDevController;
 import com.android.internal.telephony.HardwareConfig;
 
+import com.mediatek.internal.telephony.cdma.CdmaFeatureOptionUtils;
+
 import java.io.ByteArrayInputStream;
 import java.io.DataInputStream;
 import java.io.FileDescriptor;
@@ -299,7 +301,7 @@ private RILRequest() {
     //***** Constants
 
     // match with constant in ril.cpp
-    static final int RIL_MAX_COMMAND_BYTES = (8 * 1024);
+    static final int RIL_MAX_COMMAND_BYTES = (20 * 1024);  // MTK
     static final int RESPONSE_SOLICITED = 0;
     static final int RESPONSE_UNSOLICITED = 1;
 
@@ -691,35 +693,53 @@ public RIL(Context context, int preferredNetworkType,
                 DEFAULT_WAKE_LOCK_TIMEOUT);
         mWakeLockCount = 0;
 
-        mSenderThread = new HandlerThread("RILSender" + mInstanceId);
-        mSenderThread.start();
-
-        Looper looper = mSenderThread.getLooper();
-        mSender = new RILSender(looper);
-
-        ConnectivityManager cm = (ConnectivityManager)context.getSystemService(
-                Context.CONNECTIVITY_SERVICE);
-        if (cm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE) == false) {
-            riljLog("Not starting RILReceiver: wifi-only");
-        } else {
-            riljLog("Starting RILReceiver" + mInstanceId);
-            mReceiver = createRILReceiver();
-            mReceiverThread = new Thread(mReceiver, "RILReceiver" + mInstanceId);
-            mReceiverThread.start();
-
+        ///M: SVLTE solution2 C2K RIL connect/disconnect  control. @{
+        if (CdmaFeatureOptionUtils.isCdmaLteDcSupport()) {
+            if (mPreferredNetworkType != RILConstants.NETWORK_MODE_CDMA) {
+                connectRild();
+            }
             DisplayManager dm = (DisplayManager)context.getSystemService(
                     Context.DISPLAY_SERVICE);
             mDefaultDisplay = dm.getDisplay(Display.DEFAULT_DISPLAY);
             dm.registerDisplayListener(mDisplayListener, null);
-            mDefaultDisplayState = mDefaultDisplay.getState();
+        } else {
+            mSenderThread = new HandlerThread("RILSender" + mInstanceId);
+            mSenderThread.start();
+
+            Looper looper = mSenderThread.getLooper();
+            mSender = new RILSender(looper);
 
-            IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
-            Intent batteryStatus = context.registerReceiver(mBatteryStateListener, filter);
-            if (batteryStatus != null) {
-                // 0 means it's on battery
-                mIsDevicePlugged = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0) != 0;
+            ConnectivityManager cm = (ConnectivityManager)context.getSystemService(
+                    Context.CONNECTIVITY_SERVICE);
+            if (cm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE) == false) {
+                riljLog("Not starting RILReceiver: wifi-only");
+            } else {
+                riljLog("Starting RILReceiver" + mInstanceId);
+                mReceiver = createRILReceiver();
+                mReceiverThread = new Thread(mReceiver, "RILReceiver" + mInstanceId);
+                mReceiverThread.start();
+
+                DisplayManager dm = (DisplayManager)context.getSystemService(
+                        Context.DISPLAY_SERVICE);
+                mDefaultDisplay = dm.getDisplay(Display.DEFAULT_DISPLAY);
+                dm.registerDisplayListener(mDisplayListener, null);
+                mDefaultDisplayState = mDefaultDisplay.getState();
+
+                IntentFilter filter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
+                Intent batteryStatus = context.registerReceiver(mBatteryStateListener, filter);
+                if (batteryStatus != null) {
+                    // 0 means it's on battery
+                    mIsDevicePlugged = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, 0) != 0;
+                }
             }
         }
+        /// @}
+        // xen0n: (useless) refactoring
+        /*
+        IntentFilter filter = new IntentFilter();
+        filter.addAction("com.mtk.TEST_TRM");
+        context.registerReceiver(mIntentReceiver, filter);
+        */
 
         TelephonyDevController tdc = TelephonyDevController.getInstance();
         tdc.registerRIL(this);
@@ -5291,4 +5311,27 @@ public void setBipPsType(int type) {
         unexpectedMTKCall();
     }
     //UTK end
+
+    ///M: C2K RIL SWITCH @{
+    protected void connectRild() {
+        mSenderThread = new HandlerThread("RILSender" + mInstanceId);
+        mSenderThread.start();
+        Looper looper = mSenderThread.getLooper();
+        mSender = new RILSender(looper);
+
+        riljLog("Starting RILReceiver" + mInstanceId);
+        mReceiver = new RILReceiver();
+        mReceiverThread = new Thread(mReceiver, "RILReceiver" + mInstanceId);
+        mReceiverThread.start();
+    }
+
+    @Override
+    public void connectRilSocket() {
+        unexpectedMTKCall();
+    }
+
+    @Override
+    public void disconnectRilSocket() {
+        unexpectedMTKCall();
+    }
 }
