From 70cd7a6d0b52f11334ccdd186263eeaf49cb2b60 Mon Sep 17 00:00:00 2001
From: vgdn1942 <vgdn1942@gmail.com>
Date: Thu, 14 Dec 2017 21:48:45 +0300
Subject: [PATCH] IMS: update interface definitions with MTK bits

Change-Id: I7bec402a217965a7cabc7adcd8871ca8fee78cd7
---
 .../com/android/ims/internal/IImsCallSession.aidl  | 30 +++++++++++++++++++
 .../ims/internal/IImsCallSessionListener.aidl      | 13 +++++++++
 .../java/com/android/ims/internal/IImsService.aidl | 34 ++++++++++++++++++++++
 .../java/com/android/ims/internal/IImsUt.aidl      | 15 ++++++++++
 .../com/android/ims/internal/IImsUtListener.aidl   | 12 ++++++++
 .../ims/internal/IImsVideoCallCallback.aidl        |  7 +++++
 .../ims/internal/IImsVideoCallProvider.aidl        |  6 ++++
 7 files changed, 117 insertions(+)

diff --git a/telephony/java/com/android/ims/internal/IImsCallSession.aidl b/telephony/java/com/android/ims/internal/IImsCallSession.aidl
index b1f2d32..7e2fc74 100644
--- a/telephony/java/com/android/ims/internal/IImsCallSession.aidl
+++ b/telephony/java/com/android/ims/internal/IImsCallSession.aidl
@@ -17,6 +17,7 @@
 package com.android.ims.internal;
 
 import android.os.Message;
+import android.os.Messenger;
 import com.android.ims.ImsCallProfile;
 import com.android.ims.ImsStreamMediaProfile;
 import com.android.ims.internal.IImsCallSessionListener;
@@ -255,4 +256,33 @@ interface IImsCallSession {
      * @return {@code True} if the session is multiparty.
      */
     boolean isMultiparty();
+
+    // MTK
+
+    /// M: For one-key conference MT displayed as incoming conference call. @{
+    /**
+     * Determines if the current incoming session is multiparty.
+     * @return {@code True} if the incoming session is multiparty.
+     * @hide
+     */
+    boolean isIncomingCallMultiparty();
+    /// @}
+
+    /// M: ALPS02321477 @{
+    /// Google issue. Original sendDtmf could not pass Message.target to another process, because
+    /// Message.writeToParcel didn't write target. Workaround this issue by adding a new API
+    /// which passes target by Messenger.
+    /**
+     * Sends a DTMF code. According to <a href="http://tools.ietf.org/html/rfc2833">RFC 2833</a>,
+     * event 0 ~ 9 maps to decimal value 0 ~ 9, '*' to 10, '#' to 11, event 'A' ~ 'D' to 12 ~ 15,
+     * and event flash to 16. Currently, event flash is not supported. For usage of passing Message
+     * across processes.
+     *
+     * @param c the DTMF to send. '0' ~ '9', 'A' ~ 'D', '*', '#' are valid inputs.
+     * @param result.
+     * @param target Message target handler.
+     * @hide
+     */
+    void sendDtmfbyTarget(char c, in Message result, in Messenger target);
+    /// @}
 }
diff --git a/telephony/java/com/android/ims/internal/IImsCallSessionListener.aidl b/telephony/java/com/android/ims/internal/IImsCallSessionListener.aidl
index d562ecc..1de1e63 100644
--- a/telephony/java/com/android/ims/internal/IImsCallSessionListener.aidl
+++ b/telephony/java/com/android/ims/internal/IImsCallSessionListener.aidl
@@ -130,4 +130,17 @@ interface IImsCallSessionListener {
      */
     void callSessionSuppServiceReceived(in IImsCallSession session,
          in ImsSuppServiceNotification suppSrvNotification);
+
+    // MTK
+
+    /// M: ALPS02256671. PAU update. @{
+    /**
+     * Notifies of a change to the PAU information for this {@code ImsCallSession}.
+     *
+     * @param session The call session.
+     * @param profile The call profile.
+     * @hide
+     */
+    void callSessionPauInfoChanged(in IImsCallSession session, in ImsCallProfile profile);
+    /// @}
 }
diff --git a/telephony/java/com/android/ims/internal/IImsService.aidl b/telephony/java/com/android/ims/internal/IImsService.aidl
index 406d22d..3a1481a 100644
--- a/telephony/java/com/android/ims/internal/IImsService.aidl
+++ b/telephony/java/com/android/ims/internal/IImsService.aidl
@@ -92,4 +92,38 @@ interface IImsService {
      * MultiEndpoint interface for DEP.
      */
     IImsMultiEndpoint getMultiEndpointInterface(int serviceId);
+
+    // MTK
+
+    /**
+     * call interface for allowing/refusing the incoming call indication send to App.
+     */
+    void setCallIndication(String callId, int seqNum, boolean isAllow);
+
+    /**
+     * Use to query ims enable/disable status.
+     */
+    int getImsState();
+
+    /**
+     * Use to query ims registration information.
+     */
+    boolean getImsRegInfo(int phoneId);
+
+    /**
+     * Use to query ims registration extension information.
+     */
+    String getImsExtInfo();
+
+    /**
+     * Use to hang up all calls.
+     */
+    void hangupAllCall();
+
+    ///M: WFC: Use to get WFC registration status @ {
+    /**
+     * Use to get registration status.
+     */
+    int getRegistrationStatus();
+    /// @}
 }
diff --git a/telephony/java/com/android/ims/internal/IImsUt.aidl b/telephony/java/com/android/ims/internal/IImsUt.aidl
index e259938..af3f766 100644
--- a/telephony/java/com/android/ims/internal/IImsUt.aidl
+++ b/telephony/java/com/android/ims/internal/IImsUt.aidl
@@ -116,4 +116,19 @@ interface IImsUt {
       * Retrieves the configuration of the call forward for specified service class.
       */
     int queryCFForServiceClass(int condition, String number, int serviceClass);
+
+    // MTK
+
+    /// M: SS OP01 Ut @{
+    /**
+     * Retrieves the configuration of the call forward in time slot.
+     */
+    int queryCallForwardInTimeSlot(int condition);
+
+    /**
+     * Updates the configuration of the call forward in time slot.
+     */
+    int updateCallForwardInTimeSlot(int action, int condition,
+            String number, int timeSeconds, in long[] timeSlot);
+    /// @}
 }
diff --git a/telephony/java/com/android/ims/internal/IImsUtListener.aidl b/telephony/java/com/android/ims/internal/IImsUtListener.aidl
index 6416631..50461bb 100644
--- a/telephony/java/com/android/ims/internal/IImsUtListener.aidl
+++ b/telephony/java/com/android/ims/internal/IImsUtListener.aidl
@@ -19,6 +19,8 @@ package com.android.ims.internal;
 import android.os.Bundle;
 
 import com.android.ims.ImsCallForwardInfo;
+/// M: SS OP01 Ut
+import com.android.ims.ImsCallForwardInfoEx;
 import com.android.ims.ImsSsInfo;
 import com.android.ims.internal.IImsUt;
 import com.android.ims.ImsReasonInfo;
@@ -56,4 +58,14 @@ interface IImsUtListener {
      */
     void utConfigurationCallWaitingQueried(in IImsUt ut,
             int id, in ImsSsInfo[] cwInfo);
+
+    // MTK
+
+    /// M: SS OP01 Ut @{
+    /**
+     * Notifies the status of the call forwarding in a time slot supplementary service.
+     */
+    void utConfigurationCallForwardInTimeSlotQueried(in IImsUt ut,
+            int id, in ImsCallForwardInfoEx[] cfInfo);
+    /// @}
 }
diff --git a/telephony/java/com/android/ims/internal/IImsVideoCallCallback.aidl b/telephony/java/com/android/ims/internal/IImsVideoCallCallback.aidl
index 9499c9f..2eeb182 100644
--- a/telephony/java/com/android/ims/internal/IImsVideoCallCallback.aidl
+++ b/telephony/java/com/android/ims/internal/IImsVideoCallCallback.aidl
@@ -45,4 +45,11 @@ oneway interface IImsVideoCallCallback {
     void changeCameraCapabilities(in VideoProfile.CameraCapabilities cameraCapabilities);
 
     void changeVideoQuality(int videoQuality);
+
+    // MTK
+
+    /* M: ViLTE part start */
+    /* Different from AOSP, additional parameter "rotation" is added. */
+    void changePeerDimensionsWithAngle(int width, int height, int rotation);
+    /* M: ViLTE part end */
 }
diff --git a/telephony/java/com/android/ims/internal/IImsVideoCallProvider.aidl b/telephony/java/com/android/ims/internal/IImsVideoCallProvider.aidl
index 39e83c6..24592ff 100644
--- a/telephony/java/com/android/ims/internal/IImsVideoCallProvider.aidl
+++ b/telephony/java/com/android/ims/internal/IImsVideoCallProvider.aidl
@@ -62,4 +62,10 @@ oneway interface IImsVideoCallProvider {
     void requestCallDataUsage();
 
     void setPauseImage(in Uri uri);
+
+    // MTK
+
+    /* M: ViLTE part start */
+    void setUIMode(int mode);
+    /* M: ViLTE part end */
 }
-- 
2.7.4

