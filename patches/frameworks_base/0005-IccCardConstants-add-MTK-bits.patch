From 18b6ae2a0aff6eae1b80b65a637d49a58da615be Mon Sep 17 00:00:00 2001
From: vgdn1942 <vgdn1942@gmail.com>
Date: Thu, 14 Dec 2017 17:02:44 +0300
Subject: [PATCH] IccCardConstants: add MTK bits

Change-Id: Ic1438a63e6cfe9d2a24d1a30c210908692ce7197
---
 .../internal/telephony/IccCardConstants.java       | 109 +++++++++++++++++++++
 1 file changed, 109 insertions(+)

diff --git a/telephony/java/com/android/internal/telephony/IccCardConstants.java b/telephony/java/com/android/internal/telephony/IccCardConstants.java
index f3d9335..ad848a6 100644
--- a/telephony/java/com/android/internal/telephony/IccCardConstants.java
+++ b/telephony/java/com/android/internal/telephony/IccCardConstants.java
@@ -107,4 +107,113 @@ public class IccCardConstants {
             }
         }
     }
+
+    // MTK
+
+    // Added by M begin
+    /**
+     * NETWORK_SUBSET means ICC is locked on NETWORK SUBSET PERSONALIZATION.
+     * @internal
+     */
+    public static final String INTENT_VALUE_LOCKED_NETWORK_SUBSET = "NETWORK_SUBSET";
+    /**
+     * CORPORATE means ICC is locked on CORPORATE PERSONALIZATION.
+     * @internal
+     */
+    public static final String INTENT_VALUE_LOCKED_CORPORATE = "CORPORATE";
+    /**
+     * SERVICE_PROVIDER means ICC is locked on SERVICE_PROVIDER PERSONALIZATION.
+     * @internal
+     */
+    public static final String INTENT_VALUE_LOCKED_SERVICE_PROVIDER = "SERVICE_PROVIDER";
+    /**
+     * SIM means ICC is locked on SIM PERSONALIZATION.
+     * @internal
+     */
+    public static final String INTENT_VALUE_LOCKED_SIM = "SIM";
+    // Added by M end
+
+    // MTK-START
+    /**
+     * This card type is report by CDMA(VIA) modem.
+     * for CT requset to detect card type then give a warning
+     * @deprecated - use IccCardType instead
+     */
+    @Deprecated public enum CardType {
+        UIM_CARD(1),             //ICC structure, non CT UIM card
+        SIM_CARD(2),             //ICC structure, non CT SIM card
+        UIM_SIM_CARD(3),         //ICC structure, non CT dual mode card
+        UNKNOW_CARD(4),          //card is present, but can't detect type
+        CT_3G_UIM_CARD(5),       //ICC structure, CT 3G UIM card
+        CT_UIM_SIM_CARD(6),      //ICC structure, CT 3G dual mode card
+        PIN_LOCK_CARD(7),        //this card need PIN
+        CT_4G_UICC_CARD(8),      //UICC structure, CT 4G dual mode UICC card
+        NOT_CT_UICC_CARD(9),     //UICC structure, Non CT 4G dual mode UICC card
+        LOCKED_CARD(18),         //card is locked
+        CARD_NOT_INSERTED(255);  //card is not inserted
+
+        private int mValue;
+
+        public int getValue() {
+            return mValue;
+        }
+
+        /**
+         * Get CardType from integer.
+         * ASSERT: Please DON'T directly use CardType.values(), otherwise JE will occur
+         * @param cardTypeInt for cardType index.
+         * @return CardType.
+         */
+        public static IccCardConstants.CardType getCardTypeFromInt(int cardTypeInt) {
+            CardType cardType = CARD_NOT_INSERTED;
+            CardType[] cardTypes = CardType.values();
+            for (int i = 0; i < cardTypes.length; i++) {
+                if (cardTypes[i].getValue() == cardTypeInt) {
+                    cardType = cardTypes[i];
+                    break;
+                }
+            }
+            return cardType;
+        }
+
+        /**
+         * Check if it is 4G card.
+         * @return true if it is 4G card
+         */
+        public boolean is4GCard() {
+            return ((this == CT_4G_UICC_CARD) || (this == NOT_CT_UICC_CARD));
+        }
+
+        /**
+         * Check if it is 3G card.
+         * @return true if it is 3G card
+         */
+        public boolean is3GCard() {
+            return ((this == UIM_CARD) || (this == CT_UIM_SIM_CARD)
+                    || (this == CT_3G_UIM_CARD) || (this == CT_UIM_SIM_CARD));
+        }
+
+        /**
+         * Check if it is dual mode card.
+         * @return true if it is dual mode card
+         */
+        public boolean isDualModeCard() {
+            return ((this == UIM_SIM_CARD) || (this == CT_UIM_SIM_CARD)
+                    || (this == CT_4G_UICC_CARD) || (this == NOT_CT_UICC_CARD));
+        }
+
+        /**
+         * Check if it is OP09 card.
+         * @return true if it is OP09 card
+         */
+        public boolean isOPO9Card() {
+            return ((this == CT_3G_UIM_CARD) || (this == CT_UIM_SIM_CARD)
+                    || (this == CT_4G_UICC_CARD));
+        }
+
+        private CardType(int value) {
+            mValue = value;
+        }
+    }
+    // MTK-END
 }
-- 
2.7.4

